{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/provider/TreeViewProvider.ts", "../src/utilities/getNonce.ts"],
  "sourcesContent": ["import {\n  commands,\n  ExtensionContext,\n  window,\n } from \"vscode\";\nimport * as vscode from \"vscode\";\nimport{TreesViewProvider} from'./provider/TreeViewProvider';\nimport { Device } from \"./types/data\";\n\n\n\nexport function activate(context: ExtensionContext) {\n   let devices: Device[] = [];\n    //add the TreeProvider\n context.subscriptions.push(\n    vscode.window.registerWebviewViewProvider(\n      TreesViewProvider.viewType,\n      new TreesViewProvider(context.extensionUri)\n    )\n  );\n\n\n\n  \n    const devicesetDataProvider = new TreesViewProvider(context.extensionUri);\n\n    // Create a tree view to contain the list of firechip devices\n    const treeView = window.createTreeView(\"firechip.devicesList\", {\n      treeDataProvider: devicesetDataProvider,\n      showCollapseAll: false,\n    });\n const openDevice = commands.registerCommand(\"firechip.showDeviceDetailView\", () => {\n    const selectedTreeViewItem = treeView.selection[0];\n    const matchingDevice = devices.find((device) => device.id === selectedTreeViewItem.id);\n    if (!matchingDevice) {\n      window.showErrorMessage(\"No matching device found\");\n      return;\n    }\n });\n   context.subscriptions.push(openDevice);\n\n}\n\n\n", "import {\r\n  commands,\r\n  ExtensionContext,\r\n  Uri,\r\n  WebviewViewProvider,\r\n  WebviewViewResolveContext,\r\n  Webview,\r\n  CancellationToken,\r\n  SnippetString,\r\n} from \"vscode\";\r\nimport * as vscode from \"vscode\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport { getNonce } from \"../utilities/getNonce\";\r\n\r\nexport class TreesViewProvider extends vscode.TreeItem {\r\n  public static readonly viewType = \"component-gallery.ESPRESSIF\";\r\n  private _view?: vscode.WebviewView;\r\n  private data: any[];\r\n\r\n  constructor(private readonly _extensionUri: Uri) {\r\n    this.data = this.loadData(); // Load the data from data.json\r\n  }\r\n\r\n  private loadData(): any[] {\r\n    const dataPath = path.join(\r\n      this._extensionUri.fsPath,\r\n      \"..\",\r\n      \"component-gallery\",\r\n      \"src\",\r\n      \"data.json\"\r\n    );\r\n    const rawData = fs.readFileSync(dataPath, \"utf8\");\r\n    return JSON.parse(rawData);\r\n  }\r\n\r\n  public resolveWebviewView(\r\n    webviewView: vscode.WebviewView,\r\n    _context: WebviewViewResolveContext,\r\n    _token: CancellationToken\r\n  ) {\r\n    this._view = webviewView;\r\n\r\n    webviewView.webview.options = {\r\n      enableScripts: true,\r\n      localResourceRoots: [this._extensionUri],\r\n    };\r\n\r\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\r\n\r\n    webviewView.webview.onDidReceiveMessage((data) => {\r\n      switch (data.type) {\r\n        case \"colorSelected\": {\r\n          vscode.window.activeTextEditor?.insertSnippet(new SnippetString(`#${data.value}`));\r\n          break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n \r\n\r\n  \r\n\r\n  private _getHtmlForWebview(webview: Webview) {\r\n    const scriptUri = webview.asWebviewUri(Uri.joinPath(this._extensionUri, \"media\", \"main.js\"));\r\n\r\n    const styleResetUri = webview.asWebviewUri(\r\n      Uri.joinPath(this._extensionUri, \"media\", \"reset.css\")\r\n    );\r\n    const styleVSCodeUri = webview.asWebviewUri(\r\n      Uri.joinPath(this._extensionUri, \"media\", \"vscode.css\")\r\n    );\r\n    const styleMainUri = webview.asWebviewUri(\r\n      Uri.joinPath(this._extensionUri, \"media\", \"main.css\")\r\n    );\r\n\r\n    const nonce = getNonce();\r\n\r\n    const containersHTML = this.data\r\n      .map(\r\n        (item: any) => `\r\n       \r\n<section class=\"container\">\r\n  <img class=\"image\" src=\"path/to/your/image.jpg\" alt=\"Image\" />\r\n  <section>\r\n    <label class=\"first\">\r\n      ${item.name};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${item.__1}\r\n    </label>\r\n    <label class=\"seconde\">${item.dimensions}</label>\r\n    <label class=\"third\">${item.gpio}</label>\r\n  </section>\r\n</section>;\r\n      `\r\n      )\r\n      .join(\"\");\r\n\r\n    return `<!DOCTYPE html>\r\n      <html lang=\"en\">\r\n      <head>\r\n        <meta charset=\"UTF-8\">\r\n\r\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource}; script-src 'nonce-${nonce}';\">\r\n\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\r\n        <link href=\"${styleResetUri}\" rel=\"stylesheet\">\r\n        <link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\r\n        <link href=\"${styleMainUri}\" rel=\"stylesheet\">\r\n\r\n        <title>Data Information</title>\r\n      </head>\r\n      <body>\r\n        ${containersHTML}\r\n\r\n        <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\r\n      </body>\r\n      </html>`;\r\n  }\r\n}\r\n", "/**\n * A helper function that returns a unique alphanumeric identifier called a nonce.\n *\n * @remarks This function is primarily used to help enforce content security\n * policies for resources/scripts being executed in a webview context.\n *\n * @returns A nonce\n */\nexport function getNonce() {\n  let text = \"\";\n  const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n"],
  "mappings": "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",
  "names": ["import_vscode", "vscode"]
}
